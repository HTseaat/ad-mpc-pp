/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern char* pyNewSRS(GoInt srsSize);
extern char* pyKeyGeneration(char* json_SRS, GoInt n);
extern char* pyKeyEphemeralGen(char* json_SRS_pk);
extern char* pySharedKeysGen_sender(char* json_publickey, char* json_ephemeralsecretkey);
extern char* pySharedKeysGen_recv(char* json_ephemeralpublickey, char* json_secretkey);
extern char* pySampleSecret(GoInt batchsize);
extern char* pyCommit(char* json_SRS_Pk, char* json_secret, GoInt t);
extern char* pyPedersenCommit(char* json_SRS_Pk, char* json_p, char* json_r);
extern char* pyPedersenCombine(char* json_gp, char* json_hr);
extern char* pyCircuitAdd(char* jsonLeft, char* jsonRight);
extern char* pyCommitWithZeroFull(char* json_SRS_Pk, char* json_secret, char* json_secret_aux, GoInt t);
extern char* pyComputeShareGH(char* json_SRS_Pk, char* json_prooflist_left, char* json_prooflist_right);
extern GoUint8 pyBatchVerify(char* json_SRS_Vk, char* json_commitmentlist, char* json_prooflist, GoInt i);
extern GoUint8 pyBatchVerifyPub(char* json_SRS_Vk, char* json_commitmentlist, char* json_proofAtZero, char* json_shareG, char* json_shareH, GoInt i);
extern char* VMmatrixGen(GoInt t);
extern char* pyRandomShareCompute(char* json_matrix, char* json_set, char* json_comlist, char* json_prooflist, GoInt t);
extern char* pyParseRandom(char* json_SRS_Pk, char* json_commitmentlist, char* json_prooflist, GoInt t, GoInt my_id);
extern char* pyDeriveChallenge(char* json_commitment);

// pyAggProveEvalZero(json_proofs, json_gamma) â†’ {"aggH": {...}}
extern char* pyAggProveEvalZero(char* json_proofs, char* json_gamma);

// pyPubAggVerifyEval(vk, commitmentList, gClaim, hClaim, aggH, gamma, pointIdx) -> bool
//    vk               : VerifyingKey JSON
//    commitmentList   : []Digest JSON (same as serialized_commitment)
//    gClaim / hClaim  : Digest JSON  (single G1 point each)
//    aggH             : Digest JSON  (aggregated witness)
//    gamma            : decimal string
//    pointIdx         : evaluation point index (int)
//
// Returns C.bool(1) if verification passes, else 0.
extern GoUint8 pyPubAggVerifyEval(char* json_vk, char* json_commitments, char* json_gClaim, char* json_hClaim, char* json_aggH, char* json_gamma, GoInt pointIdx);
extern GoUint8 pyPubAggVerifyEvalCombined(char* json_vk, char* json_commitments, char* json_combinedClaim, char* json_aggH, char* json_gamma, GoInt pointIdx);
extern char* pyAggProveEval(char* json_commitments, char* json_proofs, char* json_gamma);
extern char* pyMultiplyClaimedValuesWithAux(char* json_prooflist_left, char* json_prooflist_right);

// pyBatchhiddenverify verifies hidden evaluation for a fixed point.
//
extern GoUint8 pyBatchhiddenverify(char* json_SRS_Vk, char* json_commitmentlist_ab, char* json_zkProof_ab, GoInt dealer_id);

// pyBatchhiddenzeroverify verifies hidden evaluation for zero point.
//
extern GoUint8 pyBatchhiddenzeroverify(char* json_SRS_Vk, char* json_commitment_c, char* json_zkProof_c_zero);

// pyProdverify verifies product proofs.
//
extern GoUint8 pyProdverify(char* json_SRS_Vk, char* json_zkProof_ab, char* json_zkProof_c_zero, char* json_proofproduct);

// pyTriplesCompute reconstructs triples from secret shares using Lagrange interpolation.
//
extern char* pyTriplesCompute(char* json_commonset, char* json_shares_ab, char* json_c_shares, char* json_c_com);
extern char* pyInterpolateShareswithTransfer(char* json_commonset, char* json_commitAll, char* json_shareAll);
extern void pyReconstruct(char* json_0, char* json_1, char* json_2, char* json_3);

#ifdef __cplusplus
}
#endif
